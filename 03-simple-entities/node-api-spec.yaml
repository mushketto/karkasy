openapi: 3.0.0
info:
  title: Categories and Products API
  version: 1.0.0
  description: API to manage categories and products with relationships.
servers:
  - url: http://localhost:3000
    description: Main API Server

paths:
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      parameters:
        - in: query
          name: page
          description: The page number to retrieve
          required: false
          schema:
             type: integer
        - in: query
          name: limit
          description: The page number to retrieve
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/Category'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '404':
          description: 'No categories found'
    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: The created category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /categories/{categoryId}/products:
    get:
      tags:
        - Categories
      summary: Get all products for a specific category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: Category not found
  
  /categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Get a specific category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A specific category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    put:
      tags:
        - Categories
      summary: Update a specific category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: The updated category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      tags:
        - Categories
      summary: Delete a specific category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category deleted successfully
  
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      parameters:
        - in: query
          name: page
          description: The page number to retrieve
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: The page number to retrieve
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/Meta'
    post:
      tags:
        - Products
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: The created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get a specific product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A specific product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - Products
      summary: Update a specific product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: The updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - Products
      summary: Delete a specific product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully

components:
  schemas:
    Meta:
      type: object
      properties:
        totalItems:
          type: integer
          example: 0
          description: Total number of items available
        itemCount:
          type: integer
          example: 0
          description: Number of items on the current page
        itemsPerPage:
          type: integer
          example: 10
          description: Number of items per page
        totalPages:
          type: integer
          example: 0
          description: Total number of pages available
        currentPage:
          type: integer
          example: 1
          description: Current page number
    Category:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: Unique identifier for the category
        name:
          type: string
          description: Name of the category
        description:
          type: string
          description: Description of the category
        image:
          type: string
          format: uri
          description: URL to the image for the category
        created_at:
          readOnly: true
          type: string
          format: date-time
          description: Date and time the category was created
        updated_at:
          readOnly: true
          type: string
          format: date-time
          description: Date and time the category was last updated
    Product:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: Unique identifier for the product
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Description of the product
        price:
          type: number
          format: float
          description: Price of the product
        image:
          type: string
          format: uri
          description: URL to the image for the category
        category_id:
          type: string
          description: The ID of the category this product belongs to
        created_at:
          readOnly: true
          type: string
          format: date-time
          description: Date and time the category was created
        updated_at:
          readOnly: true
          type: string
          format: date-time
          description: Date and time the category was last updated
